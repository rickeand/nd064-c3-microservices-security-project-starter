Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

1. Spoofing - There might be malicious images in the container layer which could expose the system to risk.

2. Tampering - If not properly configured, the docker client could be accessed and used to download malicious images.

3. Repudiation - If an attacker gets access to the docker client, it could lead to modified dockerfiles.

4. Denial of Service - If no memory limit is set, an attacker could cause the host machine to run out of memory.

5. Elevation of Privilege - when a Dockerfile does not specify a user, it defaults to executing the container using the root user, affecting client authorization and the Dockerfile.


Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

1. Tampering - Without proper configuration etcd could be compromissed by an attacker.

2. Repudiation - An attacker could access the api server and make unauthorized changes.

3. Information Disclosure - Sensitive information could be exposed via the etcd key-value store.

4. Denial of Service - The api server could be overwhelmed by too much traffic.

5. Elevation of Privilege - Privilege can be abused by using the privileged flag. This should be avoided in all cases. This affects kube-apiserver.


Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

audit rule file: /etc/audit/rules.d/audit.rules

1.1.8 Ensure auditing is configured for Docker files and directories - containerd.sock
add -w /run/containerd/containerd.sock -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.11 Ensure auditing is configured for Docker files and directories - /etc/docker/daemon.json
add -w /etc/docker/daemon.json -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.12 Ensure auditing is configured for Docker files and directories - /etc/containerd/config.toml
add -w /etc/containerd/config.toml -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.14 Ensure auditing is configured for Docker files and directories - /usr/bin/containerd
add -w /usr/bin/containerd -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.15 Ensure auditing is configured for Docker files and directories - /usr/bin/containerd-shim
add -w /usr/bin/containerd-shim -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.16 Ensure auditing is configured for Docker files and directories - /usr/bin/containerd-shim-runc-v1
add -w /usr/bin/containerd-shim-runc-v1 -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.17 Ensure auditing is configured for Docker files and directories - /usr/bin/containerd-shim-runc-v2
add -w /usr/bin/containerd-shim-runc-v2 -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd

1.1.18 Ensure auditing is configured for Docker files and directories - /usr/bin/runc
add -w /usr/bin/runc -k docker to /etc/audit/rules.d/audit.rules and run sudo systemctl restart auditd






